{
  "info": {
    "_postman_id": "bc171bfe-55b3-49e3-b56c-1b93897e75eb",
    "name": "feature-comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27131952"
  },
  "item": [
    {
      "name": "Добавление категории 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Категория создалась\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"testcategory1\"\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        },
        "description": "Обратите внимание: имя категории должно быть уникальным"
      },
      "response": [
        {
          "name": "Категория добавлена",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"name\": \"<string>\",\n  \"id\": \"<long>\"\n}"
        },
        {
          "name": "Запрос составлен некорректно",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        },
        {
          "name": "Нарушение целостности данных",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        }
      ]
    },
    {
      "name": "Добавление пользователя 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"testuser1@test.com\",\n  \"name\": \"testuser1\"\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": [
        {
          "name": "Пользователь зарегистрирован",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\",\n  \"id\": \"<long>\"\n}"
        },
        {
          "name": "Запрос составлен некорректно",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        },
        {
          "name": "Нарушение целостности данных",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        }
      ]
    },
    {
      "name": "Добавление пользователя 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 2').to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"testuser2@test.com\",\n  \"name\": \"testuser2\"\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": [
        {
          "name": "Пользователь зарегистрирован",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\",\n  \"id\": \"<long>\"\n}"
        },
        {
          "name": "Запрос составлен некорректно",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        },
        {
          "name": "Нарушение целостности данных",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        }
      ]
    },
    {
      "name": "Добавление события 1 пользователем 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"annotation\": \"Vitae et non aut. Enim incidunt molestiae. Aut eaque unde architecto est dolorem magnam qui eius. Deleniti reiciendis velit quas est animi eaque natus. Est impedit ut numquam numquam facilis ea nam.\",\n    \"category\": 1,\n    \"description\": \"Non voluptate est consequuntur odio. Dolorum neque maxime doloremque molestiae voluptas. Nulla esse cumque est eius et aut.\\n \\rAnimi vero ad autem deserunt. Voluptatem laborum fugit quis vel pariatur repudiandae sit tempora tempore. Sed possimus ut qui dolores voluptas voluptatum eos. Numquam quia quia sit molestiae. Inventore soluta quidem sed debitis non.\\n \\rSed voluptates nihil explicabo consequatur consequuntur voluptatem voluptas dignissimos facere. Quo ut unde reprehenderit. Consequatur sint similique voluptas sint.\",\n    \"eventDate\": \"2034-01-24 03:07:17\",\n    \"location\": {\n        \"lat\": -9.1597,\n        \"lon\": 10.3701\n    },\n    \"paid\": \"false\",\n    \"participantLimit\": \"170\",\n    \"requestModeration\": \"false\",\n    \"title\": \"testevent1\"\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "events"
          ]
        },
        "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
      },
      "response": [
        {
          "name": "Событие добавлено",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"annotation\": \"<string>\",\n  \"category\": {\n    \"name\": \"<string>\",\n    \"id\": \"<long>\"\n  },\n  \"eventDate\": \"<string>\",\n  \"initiator\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"paid\": \"<boolean>\",\n  \"title\": \"<string>\",\n  \"confirmedRequests\": \"<long>\",\n  \"createdOn\": \"<string>\",\n  \"description\": \"<string>\",\n  \"id\": \"<long>\",\n  \"participantLimit\": 0,\n  \"publishedOn\": \"<string>\",\n  \"requestModeration\": true,\n  \"state\": \"PENDING\",\n  \"views\": \"<long>\"\n}"
        },
        {
          "name": "Запрос составлен некорректно",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        },
        {
          "name": "Событие не удовлетворяет правилам создания",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        }
      ]
    },
    {
      "name": "Добавление события 2 пользователем 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 2').to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"annotation\": \"Vitae et non aut. Enim incidunt molestiae. Aut eaque unde architecto est dolorem magnam qui eius. Deleniti reiciendis velit quas est animi eaque natus. Est impedit ut numquam numquam facilis ea nam.\",\n    \"category\": 1,\n    \"description\": \"Non voluptate est consequuntur odio. Dolorum neque maxime doloremque molestiae voluptas. Nulla esse cumque est eius et aut.\\n \\rAnimi vero ad autem deserunt. Voluptatem laborum fugit quis vel pariatur repudiandae sit tempora tempore. Sed possimus ut qui dolores voluptas voluptatum eos. Numquam quia quia sit molestiae. Inventore soluta quidem sed debitis non.\\n \\rSed voluptates nihil explicabo consequatur consequuntur voluptatem voluptas dignissimos facere. Quo ut unde reprehenderit. Consequatur sint similique voluptas sint.\",\n    \"eventDate\": \"2034-01-24 03:07:17\",\n    \"location\": {\n        \"lat\": -9.1597,\n        \"lon\": 10.3701\n    },\n    \"paid\": \"false\",\n    \"participantLimit\": \"170\",\n    \"requestModeration\": \"false\",\n    \"title\": \"testevent2\"\n}",
          "options": {
            "raw": {
              "headerFamily": "json",
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "events"
          ]
        },
        "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
      },
      "response": [
        {
          "name": "Событие добавлено",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"annotation\": \"<string>\",\n  \"category\": {\n    \"name\": \"<string>\",\n    \"id\": \"<long>\"\n  },\n  \"eventDate\": \"<string>\",\n  \"initiator\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"paid\": \"<boolean>\",\n  \"title\": \"<string>\",\n  \"confirmedRequests\": \"<long>\",\n  \"createdOn\": \"<string>\",\n  \"description\": \"<string>\",\n  \"id\": \"<long>\",\n  \"participantLimit\": 0,\n  \"publishedOn\": \"<string>\",\n  \"requestModeration\": true,\n  \"state\": \"PENDING\",\n  \"views\": \"<long>\"\n}"
        },
        {
          "name": "Запрос составлен некорректно",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        },
        {
          "name": "Событие не удовлетворяет правилам создания",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"annotation\": \"<string>\",\n  \"category\": \"<long>\",\n  \"description\": \"<string>\",\n  \"eventDate\": \"<string>\",\n  \"location\": {\n    \"lat\": \"<float>\",\n    \"lon\": \"<float>\"\n  },\n  \"title\": \"<string>\",\n  \"paid\": false,\n  \"participantLimit\": 0,\n  \"requestModeration\": true\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId"
                }
              ]
            }
          },
          "status": "Conflict",
          "code": 409,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"errors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"message\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"status\": \"420 METHOD_FAILURE\",\n  \"timestamp\": \"<string>\"\n}"
        }
      ]
    },
    {
      "name": "Добавление коментария 1 пользователем 1 событию 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Комментарий создался\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 1').to.eql(1);\r",
              "    pm.expect(pm.response.json().text, '\"text\" must be \"testcomment1\"').to.eql(\"testcomment1\");\r",
              "    pm.expect(pm.response.json().author.id, '\"author.id\" must be \"1\"').to.eql(1);\r",
              "    pm.expect(pm.response.json().eventId, '\"eventId\" must be \"1\"').to.eql(1);\r",
              "    pm.expect(pm.response.json().created, '\"created\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByAdmin, '\"modifiedByAdmin\" must not be null').to.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByUser, '\"modifiedByUser\" must not be null').to.eql(null);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"testcomment1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление коментария 2 пользователем 1 событию 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json().text, '\"text\" must be \"testcomment2\"').to.eql(\"testcomment2\");\r",
              "    pm.expect(pm.response.json().author.id, '\"author.id\" must be \"1\"').to.eql(1);\r",
              "    pm.expect(pm.response.json().eventId, '\"eventId\" must be \"1\"').to.eql(1);\r",
              "    pm.expect(pm.response.json().created, '\"created\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByAdmin, '\"modifiedByAdmin\" must not be null').to.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByUser, '\"modifiedByUser\" must not be null').to.eql(null);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"testcomment2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление коментария 3 пользователем 2 событию 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Комментарий создался\", function () {\r",
              "    pm.response.to.be.have.status(201);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().id, '\"id\" must be 3').to.eql(3);\r",
              "    pm.expect(pm.response.json().text, '\"text\" must be \"user2-testcomment3\"').to.eql(\"user2-testcomment3\");\r",
              "    pm.expect(pm.response.json().author.id, '\"author.id\" must be \"2\"').to.eql(2);\r",
              "    pm.expect(pm.response.json().eventId, '\"eventId\" must be \"2\"').to.eql(2);\r",
              "    pm.expect(pm.response.json().created, '\"created\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByAdmin, '\"modifiedByAdmin\" must not be null').to.eql(null);\r",
              "    pm.expect(pm.response.json().modifiedByUser, '\"modifiedByUser\" must not be null').to.eql(null);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"user2-testcomment3\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "2"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев админом без фильтров",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ОК\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 3').to.eql(3);\r",
              "    pm.expect(pm.response.json()[1].id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json()[2].id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев админом с фильтром по пользователю",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"ОК\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json()[1].id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?userId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев админом с фильтром по тексту",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 3').to.eql(3);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=user2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "user2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев публичный события 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json()[0].text, '\"text\" must be \"testcomment2\"').to.eql(\"testcomment2\");\r",
              "    pm.expect(pm.response.json()[1].id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Редактирование коментария 2 пользователем 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"testcomment2-modified\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Редактирование коментария 2 пользователем 2 запрещено, т.к. он не автор",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(409);    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"testcomment2-modified-byuser2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление коментария 2 пользователем 2 запрещено, т.к. он не автор",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(409);    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/2/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "2",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Отредактированный комментарий 2 виден в поиске",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json()[0].text, '\"text\" must be \"testcomment2-modified\"').to.eql(\"testcomment2-modified\");\r",
              "    pm.expect(pm.response.json()[0].modifiedByUser, '\"modifiedByUser\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json()[1].id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Редактирование коментария 2 админом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"testcomment2-modified-byadmin\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Отредактированный админом комментарий 2 виден в поиске",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json()[0].id, '\"id\" must be 2').to.eql(2);\r",
              "    pm.expect(pm.response.json()[0].text, '\"text\" must be \"testcomment2-modified-byadmin\"').to.eql(\"testcomment2-modified-byadmin\");\r",
              "    pm.expect(pm.response.json()[0].modifiedByUser, '\"modifiedByUser\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json()[0].modifiedByAdmin, '\"modifiedByAdmin\" must not be null').to.not.eql(null);\r",
              "    pm.expect(pm.response.json()[1].id, '\"id\" must be 1').to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление коментария 2 пользователем 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(204);    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "1",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление коментария 1 админом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(204);    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаленные комментарии не видны в поиске",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Проверка прошла\", function () {\r",
              "    pm.response.to.be.have.status(200);    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.expect(pm.response.json().length, '\"length\" must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}